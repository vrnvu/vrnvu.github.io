<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>arnau diaz</title>
	<subtitle>epokhe</subtitle>
	<link href="https://arnaudiaz.com/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://arnaudiaz.com"/>
	<updated>2022-02-11T00:00:00+00:00</updated>
	<id>https://arnaudiaz.com/feed.xml</id>
	<entry xml:lang="en">
		<title>traits of a good programmer</title>
		<published>2022-02-11T00:00:00+00:00</published>
		<updated>2022-02-11T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/traits-good-programmer/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/traits-good-programmer/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;checklist&quot;&gt;Checklist&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;say please and thank you&lt;&#x2F;li&gt;
&lt;li&gt;show respect for the other person&#x27;s opinion, never say &amp;quot;you&#x27;re wrong&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;if you are wrong, admit it&lt;&#x2F;li&gt;
&lt;li&gt;talk about your own mistakes before criticizing&lt;&#x2F;li&gt;
&lt;li&gt;be a good listener&lt;&#x2F;li&gt;
&lt;li&gt;be a good friend and a good son &lt;&#x2F;li&gt;
&lt;li&gt;don&#x27;t criticize, condemn, or complain&lt;&#x2F;li&gt;
&lt;li&gt;give honest and sincere appreciation&lt;&#x2F;li&gt;
&lt;li&gt;treat people well&lt;&#x2F;li&gt;
&lt;li&gt;become genuinely interested in other people&lt;&#x2F;li&gt;
&lt;li&gt;breathe clean air&lt;&#x2F;li&gt;
&lt;li&gt;exercise your body, mind and spirit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>languages worth learning</title>
		<published>2021-11-01T00:00:00+00:00</published>
		<updated>2021-11-01T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;what-language-should-i-learn-next&quot;&gt;What language should I learn next?&lt;&#x2F;h1&gt;
&lt;p&gt;A couple of entries about learning have been posted in the blog. If you have read them, you will have noticed how the context and the personal motivation matters. Start with the why. Find your final goal and set small objectives that will help you reach it. Knowing why we want to achieve something is the first step to obtain it. So, let me answer your question with another question to guide you:&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/languages-worth-learning/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/languages-worth-learning/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;what-language-should-i-learn-next&quot;&gt;What language should I learn next?&lt;&#x2F;h1&gt;
&lt;p&gt;A couple of entries about learning have been posted in the blog. If you have read them, you will have noticed how the context and the personal motivation matters. Start with the why. Find your final goal and set small objectives that will help you reach it. Knowing why we want to achieve something is the first step to obtain it. So, let me answer your question with another question to guide you:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Why do you want to learn a new language in the first place? Well, it turns out that the answer will always depend on two factors, your current context and your motivation. Everyone one has a context, our situation, the external factors that define our life. Paying the rent, saving money for emergencies, parenthood... And everyone also has motivations which are moved by internal thoughts. Who I want to be in life? Where I want to be in the next years? What are my hobbies and who I spend my time with? &lt;&#x2F;p&gt;
&lt;p&gt;Going back to our initial question. Most people program as a job or as a hobby or as both. Therefore, unless more details are provided we will get two answers from one question.&lt;&#x2F;p&gt;
&lt;p&gt;I want to learn for the sake of learning:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;A language that doesn&#x27;t affect the way you think about programming, is not worth knowing.&amp;quot; Alan Parlis&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I want to learn because I&#x27;m starting this new job or I want to change my career:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Don&#x27;t worry. you will learn it at work.&amp;quot; Everyone&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;now-really-what-language-should-i-learn-next&quot;&gt;Now really, what language should I learn next?&lt;&#x2F;h2&gt;
&lt;p&gt;This is my opinion. This is a list of languages that are worth learning on 2021. Others&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; opinions have been stated in the past obviously. They are outdated, but I encourage you to also read others suggestions. &lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start. You should first learn Basic, and then C. Why? Because the list is in alphabetical order and I would not recommend APL to my worst enemy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Elixir&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Forth&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;J or Kona&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ocaml&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prolog&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Racket&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If your langauge of choice is not in the list, does it mean that it&#x27;s not worth learning? Probably yes. &lt;&#x2F;p&gt;
&lt;p&gt;But here is a list of HMs: ADA, ATS, Coq, Haskell, Idris, Julia, Lean, Mercury, Nim, Shen, Zig.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Peter Norvig, teach yourself programming in 10 years&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;norvig.com&#x2F;21-days.html&quot;&gt;21-days&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>learning frameworks</title>
		<published>2021-10-27T00:00:00+00:00</published>
		<updated>2021-10-27T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;how-to-learn-anything&quot;&gt;How to learn anything&lt;&#x2F;h1&gt;
&lt;p&gt;This is an old essay I wrote in 2019 on how to learn anything. It&#x27;s based on some solid psychological references that at some point I should add. You can read my entries on teaching&#x2F;learning in the mean time.&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/learning-frameworks/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/learning-frameworks/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;how-to-learn-anything&quot;&gt;How to learn anything&lt;&#x2F;h1&gt;
&lt;p&gt;This is an old essay I wrote in 2019 on how to learn anything. It&#x27;s based on some solid psychological references that at some point I should add. You can read my entries on teaching&#x2F;learning in the mean time.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;graphs-pyramids-and-trees&quot;&gt;Graphs, pyramids and trees&lt;&#x2F;h2&gt;
&lt;p&gt;Knowledge is a graph. Each node represents an entry on your brain. The more nodes you add to your brain the richer you become. For the purpose of visualization is also useful to think in a pyramid or a tree. You build your ideas from fundamentals and build in top of them. A learning framework would be an ordered methodology to build this pyramid. &lt;&#x2F;p&gt;
&lt;p&gt;Two frameworks exists:  Bottom-up, from fundamentals to applications.  Top-down, from application to fundamentals. Let&#x27;s see some examples.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You read theory in a C book and you make a little program to test your knowledge. For example the topic could be manual memory management, allocation. Classical bottom up learning. From reading to writing. From theory to practice. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You follow one of my tutorials on how to write a rate limiting algorithm. It turns out you have a lot of theory holes in your knowledge tree so you get confused and have to re-read the steps all the time. You google what you don&#x27;t understand as you go. Top down learning. From a real world application such as a rate limiting algorithm to the networking and data structures fundamentals. From practice to theory.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-should-i-do&quot;&gt;What should I do?&lt;&#x2F;h2&gt;
&lt;p&gt;Both are valid paths and it&#x27;s actually beneficial to alternate both of them as you learn a topic. The key is to follow your instinct. If you feel like doing a small app then do it. It does not matter if you lose interest on the topic. It&#x27;s not a final result what you are looking for. You are after knowledge. Do you know why sometimes we stop working on side projects? It&#x27;s not that we lose interest in the topic, but, most of the times we stop working on something when we have already fulfilled our curiosity.&lt;&#x2F;p&gt;
&lt;p&gt;If knowledge is a graph. Traverse it. BFS first. Then DFS as you find interesting subtopics that you consider worth of your time. It does not matter how you actually learn, exploration and then mastering. A, B, C.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sometimes-it-does-not-work&quot;&gt;Sometimes it does not work&lt;&#x2F;h2&gt;
&lt;p&gt;It does. The effects are not immediate so you haven&#x27;t appreciated the learning yet. For beginners for example, it is better to have visual and functional things fast, to achieve engagement. Following tutorials at those levels is already a challenge. &lt;&#x2F;p&gt;
&lt;p&gt;In fact, I would recommend doing multiple tutorials on the same topic by different authors. Try to compare them, compose them. Look at modern and old material.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;temporality&quot;&gt;Temporality&lt;&#x2F;h2&gt;
&lt;p&gt;A broad topic of research is knowledge temporality. This matters and is crucial in this field. Knowledge can be temporal or timeless.&lt;&#x2F;p&gt;
&lt;p&gt;Frameworks, libraries and languages are temporary i.e. They have an expiration date. They are just implementations. They evolve and change according to the context and are opinionated.&lt;&#x2F;p&gt;
&lt;p&gt;Fundamentals will last you a lifetime. Temporary knowledge is built atop of timeless knowledge. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>what should a beginner learn</title>
		<published>2021-10-26T00:00:00+00:00</published>
		<updated>2021-10-26T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;i-want-to-be-a-programmer&quot;&gt;I want to be a programmer&lt;&#x2F;h1&gt;
&lt;p&gt;My students constantly ask me this question. I&#x27;m learning programming. What should I learn?&lt;&#x2F;p&gt;
&lt;p&gt;It turns out it is quite simple answer. A beginner should only focus on learning 5 things. &lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/what-should-a-beginner-learn/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/what-should-a-beginner-learn/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;i-want-to-be-a-programmer&quot;&gt;I want to be a programmer&lt;&#x2F;h1&gt;
&lt;p&gt;My students constantly ask me this question. I&#x27;m learning programming. What should I learn?&lt;&#x2F;p&gt;
&lt;p&gt;It turns out it is quite simple answer. A beginner should only focus on learning 5 things. &lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;operating-systems&quot;&gt;Operating systems&lt;&#x2F;h2&gt;
&lt;p&gt;OS, RAM, CPU, ROM, GPU, components of RAM&#x2F;ROM, NUMA, architecture of the kernel, monolithic vs microkernel, I&#x2F;O, syscalls, privilages &lt;&#x2F;p&gt;
&lt;h2 id=&quot;cpu&quot;&gt;CPU&lt;&#x2F;h2&gt;
&lt;p&gt;CPU scheduling, processes, tasks, preemptive&#x2F;non preemptive scheduling, scheduling algorithms&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tasks-and-processes-syncronization&quot;&gt;Tasks and processes syncronization&lt;&#x2F;h2&gt;
&lt;p&gt;Tasks, threads, processes, kernel vs user, M:N, IPC, deadlocks, shared memory, sockets, CSP, lockfree &lt;&#x2F;p&gt;
&lt;h2 id=&quot;memory-management-and-disk-management&quot;&gt;Memory management and disk management&lt;&#x2F;h2&gt;
&lt;p&gt;Allocation, swap, virtual memory, pages and faults, segmentation, partitions, static&#x2F;dynamic linking, tracing memory, file systems, structures, disk scheduling&lt;&#x2F;p&gt;
&lt;h2 id=&quot;networking&quot;&gt;Networking&lt;&#x2F;h2&gt;
&lt;p&gt;Types of networks, data link, transport, application, compression, security and cryptography, distributed system, distributed algortihms&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: One day I will clean this list so it&#x27;s more compact and memorable.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>teaching ii</title>
		<published>2021-08-03T00:00:00+00:00</published>
		<updated>2021-08-03T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;on-teaching-tech-together&quot;&gt;On teaching tech together&lt;&#x2F;h2&gt;
&lt;p&gt;How to create and deliver lessons that work and build a teaching community around them. .&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/teaching-ii/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/teaching-ii/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;on-teaching-tech-together&quot;&gt;On teaching tech together&lt;&#x2F;h2&gt;
&lt;p&gt;How to create and deliver lessons that work and build a teaching community around them. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;individual-learning&quot;&gt;Individual Learning&lt;&#x2F;h1&gt;
&lt;p&gt;This chapter looks at what learners can do for themselves by changing their study strategies and getting enough rest.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The most effective strategy is to switch from passive learning to active learning.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Read about something -&amp;gt; do exercises.&lt;&#x2F;li&gt;
&lt;li&gt;Watch a video -&amp;gt; discuss a topic.&lt;&#x2F;li&gt;
&lt;li&gt;Attend a lecture -&amp;gt; try to explain it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Active learning is more effective because it keeps new information in short-term memory longer, which increases the odds that it will be encoded successfully and stored in long-term memory. &lt;&#x2F;p&gt;
&lt;p&gt;The big prize is transfer of learning, which occurs when one thing we have learned helps us learn other things more quickly. Researchers distinguish between near transfer, which occurs between similar or related areas like fractions and decimals in mathematics, and far transfer, which occurs between dissimilar domains—for example, the idea that learning to play chess will help mathematical reasoning or vice versa.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;six-strategies&quot;&gt;Six Strategies&lt;&#x2F;h2&gt;
&lt;p&gt;Psychologists study learning in a wide variety of ways, but have reached similar conclusions about what actually works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spaced-practice&quot;&gt;Spaced Practice&lt;&#x2F;h2&gt;
&lt;p&gt;Ten hours of study spread out over five days is more effective than two five-hour days, and far better than one ten-hour day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;retrieval-practice&quot;&gt;Retrieval Practice&lt;&#x2F;h2&gt;
&lt;p&gt;The limiting factor for long-term memory is not retention (what is stored) but recall (what can be accessed). Recall of specific information improves with practice, so outcomes in real situations can be improved by taking practice tests or summarizing the details of a topic from memory and then checking what was and wasn’t remembered. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;interleaving&quot;&gt;Interleaving&lt;&#x2F;h2&gt;
&lt;p&gt;One way you can space your practice is to interleave study of different topics: &lt;strong&gt;instead of mastering one subject, then a second and third, shuffle study sessions.&lt;&#x2F;strong&gt; Even better, switch up the order: A-B-C-B-A-C is better than A-B-C-A-B-C, which in turn is better than A-A-B-B-C-C. This works because interleaving fosters creation of more links between different topics, which in turn improves recall.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elaboration&quot;&gt;Elaboration&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Explaining things to yourself as you go through them helps you understand and remember them.&lt;&#x2F;strong&gt; One way to do this is to follow up each answer on a practice quiz with an explanation of why that answer is correct, or conversely with an explanation of why some other plausible answer isn’t. Another is to tell yourself how a new idea is similar to or different from one you have seen previously.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;concrete-examples&quot;&gt;Concrete Examples&lt;&#x2F;h2&gt;
&lt;p&gt;One structured way to do this is the ADEPT method: give an Analogy, draw a Diagram, present an Example, describe the idea in Plain language, and then give the Technical details. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;dual-coding&quot;&gt;Dual Coding&lt;&#x2F;h2&gt;
&lt;p&gt;The last of the six core strategies that the Learning Scientists describe is to present words and images together.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;time-management&quot;&gt;Time Management&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;The mistake is to confuse “working” with “being productive.”&lt;&#x2F;strong&gt; You can’t produce software (or anything else) without doing some work, but you can easily do lots of work without producing anything of value. Convincing people of this can be hard, especially when they’re in their teens or twenties, but it pays tremendous dividends.&lt;&#x2F;p&gt;
&lt;p&gt;The most important results for learners are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Working more than 8 hours a day for an extended period of time lowers your total productivity&lt;&#x2F;strong&gt;, not just your hourly productivity—i.e. you get less done in total (not just per hour) when you’re in crunch mode.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Working over 21 hours in a stretch increases the odds of you making a catastrophic error just as much as being legally drunk.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Productivity varies over the course of the workday, &lt;strong&gt;with the greatest productivity occurring in the first 4 to 6 hours.&lt;&#x2F;strong&gt; After enough hours, productivity approaches zero; eventually it becomes negative.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;These facts have been reproduced and verified for over a century, and the data behind them is as solid as the data linking smoking to lung cancer.&lt;&#x2F;strong&gt; The problem is that people usually don’t notice their abilities declining. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-lesson-design-process&quot;&gt;A Lesson Design Process&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;learner-personas&quot;&gt;Learner Personas&lt;&#x2F;h2&gt;
&lt;p&gt;The first step in the reverse design process is figuring out who your audience is. One way to do this is to write two or three learner personas.&lt;&#x2F;p&gt;
&lt;p&gt;A learner persona consists of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the person’s general background.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;what they already know.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;what they want to do.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;any special needs they have.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learning-objectives&quot;&gt;Learning Objectives&lt;&#x2F;h2&gt;
&lt;p&gt;Formative and summative assessments help teachers figure out what they’re going to teach, but in order to communicate that to learners and other teachers, a course description should also have learning objectives. These help ensure that everyone has the same understanding of what a lesson is supposed to accomplish.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;objectives-vs-outcomes&quot;&gt;Objectives vs. Outcomes&lt;&#x2F;h3&gt;
&lt;p&gt;A learning objective is what a lesson strives to achieve. A learning outcome is what it actually achieves, i.e. what learners actually take away. The role of summative assessment is therefore to compare learning outcomes with learning objectives.&lt;&#x2F;p&gt;
&lt;p&gt;The list below gives a few of the verbs typically used in learning objectives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remembering:&lt;&#x2F;strong&gt; Exhibit memory of previously learned material by recalling facts, terms, basic concepts, and answers. (recognize, list, describe, name, find) &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understanding:&lt;&#x2F;strong&gt; Demonstrate understanding of facts and ideas by organizing, comparing, translating, interpreting, giving descriptions, and stating main ideas. (interpret, summarize, paraphrase, classify, explain) &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Applying:&lt;&#x2F;strong&gt; Solve new problems by applying acquired knowledge, facts, techniques and rules in a different way. (build, identify, use, plan, select) &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyzing:&lt;&#x2F;strong&gt; Examine and break information into parts by identifying motives or causes; make inferences and find evidence to support generalizations. (compare, contrast, simplify) &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Evaluating:&lt;&#x2F;strong&gt; Present and defend opinions by making judgments about information, validity of ideas, or quality of work based on a set of criteria. (check, choose, critique, prove, rate) &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating:&lt;&#x2F;strong&gt; Compile information together in a different way by combining elements in a new pattern or proposing alternative solutions. (design, construct, improve, adapt, maximize, solve) &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;pedagogical-content-knowledge&quot;&gt;Pedagogical Content Knowledge&lt;&#x2F;h1&gt;
&lt;p&gt;Every teacher needs three things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;content knowledge&lt;&#x2F;strong&gt; such as how to program. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;general pedagogical knowledge&lt;&#x2F;strong&gt; such as an understanding of the psychology of learning.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pedagogical content knowledge (PCK)&lt;&#x2F;strong&gt;, which is the domain-specific knowledge of how to teach a particular concept to a particular audience.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We need to think about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What Misconceptions Do Novices Have?&lt;&#x2F;li&gt;
&lt;li&gt;What Mistakes Do Novices Make?&lt;&#x2F;li&gt;
&lt;li&gt;How Do Novices Program?&lt;&#x2F;li&gt;
&lt;li&gt;How Do Novices Debug?&lt;&#x2F;li&gt;
&lt;li&gt;What About Testing?&lt;&#x2F;li&gt;
&lt;li&gt;Do Languages Matter?&lt;&#x2F;li&gt;
&lt;li&gt;Do Better Error Messages Help?&lt;&#x2F;li&gt;
&lt;li&gt;Does Visualization Help?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Greg Wilson&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;teachtogether.tech&#x2F;&quot;&gt;tech togheter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>teaching i</title>
		<published>2021-08-02T00:00:00+00:00</published>
		<updated>2021-08-02T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;on-teaching-tech-together&quot;&gt;On teaching tech together&lt;&#x2F;h2&gt;
&lt;p&gt;How to create and deliver lessons that work and build a teaching community around them. .&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/teaching-i/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/teaching-i/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;on-teaching-tech-together&quot;&gt;On teaching tech together&lt;&#x2F;h2&gt;
&lt;p&gt;How to create and deliver lessons that work and build a teaching community around them. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;mental-models-and-formative-assesment&quot;&gt;Mental Models and Formative Assesment&lt;&#x2F;h1&gt;
&lt;p&gt;The first task in teaching is to figure out who your learners are.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Novices:&lt;&#x2F;strong&gt; don’t know what they don’t know, i.e. they don’t yet have a usable mental model of the problem domain. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Competent practitioners:&lt;&#x2F;strong&gt; have a mental model that’s adequate for everyday purposes. They can do normal tasks with normal effort under normal circumstances, and have some understanding of the limits to their knowledge (i.e. they know what they don’t know). &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Experts:&lt;&#x2F;strong&gt; have mental models that include exceptions and special cases, which allows them to handle situations that are out of the ordinary. We will discuss expertise in more detail in Chapter 3. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;mental-model&quot;&gt;Mental model&lt;&#x2F;h2&gt;
&lt;p&gt;So what is a &lt;strong&gt;mental model?&lt;&#x2F;strong&gt; As the name suggests, it is a simplified representation of the most important parts of some problem domain that is good enough to enable problem solving.&lt;&#x2F;p&gt;
&lt;p&gt;Presenting a novice with a pile of facts is counter-productive because they don’t yet have a model to fit those facts into. In fact, presenting too many facts too soon can actually reinforce the incorrect mental model they’ve cobbled together. &lt;&#x2F;p&gt;
&lt;p&gt;Your goal when teaching novices should therefore be to help them construct a mental model so that they have somewhere to put facts. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;are-people-learning&quot;&gt;Are People Learning?&lt;&#x2F;h2&gt;
&lt;p&gt;Mark Twain once wrote, “It ain’t what you don’t know that gets you into trouble. It’s what you know for sure that just ain’t so.” One of the exercises in building a mental model is therefore to clear away things that don’t belong. Broadly speaking, novices’ misconceptions fall into three categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Factual errors:&lt;&#x2F;strong&gt; like believing that Vancouver is the capital of British Columbia (it’s Victoria). These are usually simple to correct.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Broken models:&lt;&#x2F;strong&gt; like believing that motion and acceleration must be in the same direction. We can address these by having novices reason through examples where their models give the wrong answer.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fundamental beliefs:&lt;&#x2F;strong&gt; such as “the world is only a few thousand years old” or “some kinds of people are just naturally better at programming than others”. These errors are often deeply connected to the learner’s social identity, so they resist evidence and rationalize contradictions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;People learn fastest when teachers identify and clear up learners’ misconceptions as the lesson is being delivered.&lt;&#x2F;strong&gt; This is called formative assessment because it forms (or shapes) the teaching while it is taking place. &lt;strong&gt;Learners don’t pass or fail formative assessment; instead, it gives both the teacher and the learner feedback on how well they are doing and what they should focus on next.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;formative-assessment-vs-summative-assessment&quot;&gt;Formative assessment vs summative assessment&lt;&#x2F;h2&gt;
&lt;p&gt;The counterpoint to formative assessment is summative assessment, which takes place at the end of the lesson. Summative assessment is like a driver’s test: it tells the learner whether they have mastered the topic and the teacher whether their lesson was successful. &lt;strong&gt;One way of thinking about the difference is that a chef tasting food as she cooks it is formative assessments, but the guests tasting it once it’s served is summative.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, school has trained most people to believe that all assessment is summative.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notional-machines&quot;&gt;Notional Machines&lt;&#x2F;h2&gt;
&lt;p&gt;The term computational thinking is bandied about a lot, in part because people can agree it’s important while meaning very different things by it. Rather than arguing over what it does and doesn’t include, it’s more useful to think about the notional machine that you want learners to understand. A notional machine:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is an idealized abstraction of computer hardware and other aspects of programs’ runtime environments.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;enables the semantics of programs to be described.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;correctly reflects what programs do when executed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;example-notional-machine-python&quot;&gt;Example Notional Machine: Python&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Running programs live in memory, which is divided between a call stack and a heap.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Memory for data is always allocated from the heap.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Every piece of data is stored in a two-part structure. The first part says what type the data is, and the second part is the actual value.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Booleans, numbers, and character strings are never modified after they are created.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Lists, sets, and other collections store references to other data rather than storing those values directly. They can be modified after they are created, i.e. a list can be extended or new values can be added to a set. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When code is loaded into memory, Python converts it to a sequence of instructions that are stored like any other data. This is why it’s possible to assign functions to variables and pass them as parameters. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When code is executed, Python steps through the instructions, doing what each one tells it to in turn. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Some instructions make Python read data, do calculations, and create new data. Other instructions control what instructions Python executes, which is how loops and conditionals work. Yet another instruction tells Python to call a function. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When a function is called, Python pushes a new stack frame onto the call stack. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Each stack frame stores variables’ names and references to data. Function parameters are just another kind of variable. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When a variable is used, Python looks for it in the top stack frame. If it isn’t there, it looks in the bottom (global) frame.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When the function finishes, Python erases its stack frame and jumps backs to the instructions it was executing before the function call. If there isn’t a “before,” the program has finished.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;expertise-and-memory&quot;&gt;Expertise and Memory&lt;&#x2F;h1&gt;
&lt;p&gt;The key difference between experts and competent practitioners is that experts’ mental models are much more densely connected, i.e. they are more likely to know a connection between any two facts.&lt;&#x2F;p&gt;
&lt;p&gt;The graph metaphor explains why helping learners make connections is as important as introducing them to facts: without those connections, people can’t recall and use what they know. It also explains many observed aspects of expert behavior:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Experts can often jump directly from a problem to a solution because there actually is a direct link between the two in their mind&lt;&#x2F;strong&gt;. Where a competent practitioner would have to reason A → B → C → D → E, an expert can go from A to E in a single step. We call this intuition: instead of reasoning their way to a solution, the expert recognizes a solution in the same way that they would recognize a familiar face.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Densely-connected graphs are also the basis for experts’ &lt;strong&gt;fluid representations&lt;&#x2F;strong&gt;, i.e. their ability to switch back and forth between different views of a problem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This metaphor also explains why experts are better at diagnosis than competent practitioners: &lt;strong&gt;more linkages between facts makes it easier to reason backward from symptoms to causes.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Finally, experts are often so familiar with their subject that &lt;strong&gt;they can no longer imagine what it’s like to not see the world that way.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pattern-recognition&quot;&gt;Pattern Recognition&lt;&#x2F;h2&gt;
&lt;p&gt;Recent research suggests that the actual size of short-term memory might be as low as 4±1 items.&lt;&#x2F;p&gt;
&lt;p&gt;Experts have more and larger chunks than non-experts, i.e. experts “see” larger patterns and have more patterns to match things against. This allows them to reason at a higher level and to search for information more quickly and more accurately.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;becoming-an-expert&quot;&gt;Becoming an Expert&lt;&#x2F;h2&gt;
&lt;p&gt;So how does someone become an expert? The idea that ten thousand hours of practice will do it is widely quoted but probably not true: doing the same thing over and over again is much more likely to solidify bad habits than improve performance.&lt;&#x2F;p&gt;
&lt;p&gt;What actually works is doing similar but subtly different things, paying attention to what works and what doesn’t, and then changing behavior in response to that feedback to get cumulatively better. This is called deliberate or reflective practice, and a common progression is for people to go through three stages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Act on feedback from others.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Give feedback on others’ work.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Give feedback to themselves.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Greg Wilson&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;teachtogether.tech&#x2F;&quot;&gt;tech togheter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>unix philosophy</title>
		<published>2021-03-06T00:00:00+00:00</published>
		<updated>2021-03-06T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;basics&quot;&gt;Basics&lt;&#x2F;h1&gt;
&lt;p&gt;The ‘Unix philosophy’ originated with Ken Thompson&#x27;s early meditations on how to design a small but capable operating system with a clean service interface. It grew as the Unix culture learned things about how to get maximum leverage out of Thompson&#x27;s design. It absorbed lessons from many sources along the way.&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/unix-philosophy/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/unix-philosophy/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;basics&quot;&gt;Basics&lt;&#x2F;h1&gt;
&lt;p&gt;The ‘Unix philosophy’&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; originated with Ken Thompson&#x27;s early meditations on how to design a small but capable operating system with a clean service interface. It grew as the Unix culture learned things about how to get maximum leverage out of Thompson&#x27;s design. It absorbed lessons from many sources along the way.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The Unix philosophy is not a formal design method. &lt;&#x2F;p&gt;
&lt;p&gt;The Unix philosophy is bottom-up, not top-down. It is pragmatic and grounded in experience. It is not to be found in official methods and standards, but rather in the implicit half-reflexive knowledge, the expertise that the Unix culture transmits. It encourages a sense of proportion and skepticism — and shows both by having a sense of (often subversive) humor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-is-no-rule-six&quot;&gt;There is no rule six&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can&#x27;t tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don&#x27;t try to second guess and put in a speed hack until you&#x27;ve proven that&#x27;s where the bottleneck is.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Measure&lt;&#x2F;strong&gt;. Don&#x27;t tune for speed until you&#x27;ve measured, and even then don&#x27;t unless one part of the code overwhelms the rest.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, &lt;strong&gt;don&#x27;t get fancy&lt;&#x2F;strong&gt;. (Even if n does get big, use Rule 2 first.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fancy algorithms are buggier than simple ones, and they&#x27;re much harder to implement. &lt;strong&gt;Use simple algorithms as well as simple data structures&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data dominates&lt;&#x2F;strong&gt;. If you&#x27;ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There is no Rule 6. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;rule-of-modularity&quot;&gt;Rule of Modularity&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Write simple parts connected by clean interfaces&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“Controlling complexity is the essence of computer programming”&lt;&#x2F;strong&gt;. Debugging dominates development time, and getting a working system out the door is usually less a result of brilliant design than it is of managing not to trip over your own feet too many times.&lt;&#x2F;p&gt;
&lt;p&gt;The only way to write complex software that won&#x27;t fall on its face is to hold its global complexity down — to build it out of simple parts connected by well-defined interfaces, so that most problems are local and you can have some hope of upgrading a part without breaking the whole.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-clarity&quot;&gt;Rule of Clarity&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarity is better than cleverness&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Because maintenance is so important and so expensive, write programs as if the most important communication they do is not to the computer that executes them but to the human beings who will read and maintain the source code in the future (including yourself).&lt;&#x2F;p&gt;
&lt;p&gt;Good Unix practice also embraces choosing your algorithms and implementations for future maintainability. Buying a small increase in performance with a large increase in the complexity and obscurity of your technique is a bad trade.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Code that is graceful and clear, on the other hand, is less likely to break&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-composition&quot;&gt;Rule of Composition&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Design programs to be connected with other programs&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s hard to avoid programming overcomplicated monoliths if none of your programs can talk to each other.&lt;&#x2F;p&gt;
&lt;p&gt;Unix tradition strongly encourages writing programs that read and write simple, textual, stream-oriented, device-independent formats. Under classic Unix, as many programs as possible are written as simple filters, which take a simple text stream on input and process it into another simple text stream on output.&lt;&#x2F;p&gt;
&lt;p&gt;Despite popular mythology, this practice is favored not because Unix programmers hate graphical user interfaces. It&#x27;s because if you don&#x27;t write programs that accept and emit simple text streams, it&#x27;s much more difficult to hook the programs together.&lt;&#x2F;p&gt;
&lt;p&gt;To make programs composable, make them independent. &lt;strong&gt;A program on one end of a text stream should care as little as possible about the program on the other end. It should be made easy to replace one end with a completely different implementation without disturbing the other.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-separation&quot;&gt;Rule of Separation&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Separate policy from mechanism; separate interfaces from engines&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hardwiring policy and mechanism together has two bad effects: It makes policy rigid and harder to change in response to user requirements, and it means that trying to change policy has a strong tendency to destabilize the mechanisms.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, by separating the two we make it possible to experiment with new policy without breaking mechanisms. We also make it much easier to write good tests for the mechanism (policy, because it ages so quickly, often does not justify the investment).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-simplicity&quot;&gt;Rule of Simplicity&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Design for simplicity; add complexity only where you must&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Many pressures tend to make programs more complicated (and therefore more expensive and buggy). One such pressure is technical machismo. Programmers are bright people who are (often justly) proud of their ability to handle complexity and juggle abstractions. Often they compete with their peers to see who can build the most intricate and beautiful complexities. Just as often, their ability to design outstrips their ability to implement and debug, and the result is expensive failure.&lt;&#x2F;p&gt;
&lt;p&gt;The only way to avoid these traps is to &lt;strong&gt;encourage a software culture that knows that small is beautiful, that actively resists bloat and complexity&lt;&#x2F;strong&gt;: an engineering tradition that puts a high value on simple solutions, that looks for ways to break program systems up into small cooperating pieces, and that reflexively fights attempts to gussy up programs with a lot of chrome (or, even worse, to design programs around the chrome).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-parsimony&quot;&gt;Rule of Parsimony&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a big program only when it is clear by demonstration that nothing else will do&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;‘Big’ here has the sense both of large in volume of code and of internal complexity. Allowing programs to get large hurts maintainability. Because people are reluctant to throw away the visible product of lots of work, large programs invite overinvestment in approaches that are failed or suboptimal.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-transparency&quot;&gt;Rule of Transparency&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Design for visibility to make inspection and debugging easier&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Because debugging often occupies three-quarters or more of development time, work done early to ease debugging can be a very good investment. A particularly effective way to ease debugging is to design for transparency and discoverability.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;A software system is transparent when you can look at it and immediately understand what it is doing and how&lt;&#x2F;strong&gt;. It is discoverable when it has facilities for monitoring and display of internal state so that your program not only functions well but can be seen to function well.&lt;&#x2F;p&gt;
&lt;p&gt;Designing for these qualities will have implications throughout a project. At minimum, it implies that &lt;strong&gt;debugging options should not be minimal afterthoughts. Rather, they should be designed in from the beginning&lt;&#x2F;strong&gt; — from the point of view that the program should be able to both demonstrate its own correctness and communicate to future developers the original developer&#x27;s mental model of the problem it solves.&lt;&#x2F;p&gt;
&lt;p&gt;For a program to demonstrate its own correctness, it needs to be using input and output formats sufficiently simple so that the proper relationship between valid input and correct output is easy to check.&lt;&#x2F;p&gt;
&lt;p&gt;The objective of designing for transparency and discoverability should also encourage simple interfaces that can easily be manipulated by other programs — in particular, test and monitoring harnesses and debugging scripts.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-robustness&quot;&gt;Rule of Robustness&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Robustness is the child of transparency and simplicity&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Software is said to be robust when it performs well under unexpected conditions which stress the designer&#x27;s assumptions, as well as under normal conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Most software is fragile and buggy because most programs are too complicated for a human brain to understand all at once. When you can&#x27;t reason correctly about the guts of a program, you can&#x27;t be sure it&#x27;s correct, and you can&#x27;t fix it if it&#x27;s broken.&lt;&#x2F;p&gt;
&lt;p&gt;One very important tactic for being robust under odd inputs is to avoid having special cases in your code. Bugs often lurk in the code for handling special cases, and in the interactions among parts of the code intended to handle different special cases.&lt;&#x2F;p&gt;
&lt;p&gt;We observed above that software is transparent when you can look at it and immediately see what is going on. It is simple when what is going on is uncomplicated enough for a human brain to reason about all the potential cases without strain. The more your programs have both of these qualities, the more robust they will be.&lt;&#x2F;p&gt;
&lt;p&gt;Modularity (simple parts, clean interfaces) is a way to organize programs to make them simpler. There are other ways to fight for simplicity. Here&#x27;s another one.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-representation&quot;&gt;Rule of Representation&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Fold knowledge into data, so program logic can be stupid and robust&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Even the simplest procedural logic is hard for humans to verify, but quite complex data structures are fairly easy to model and reason about. &lt;&#x2F;p&gt;
&lt;p&gt;Data is more tractable than program logic. It follows that where you see a choice between complexity in data structures and complexity in code, choose the former. More: in evolving a design, you should actively seek ways to shift complexity from code to data.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-least-surprise&quot;&gt;Rule of Least Surprise&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In interface design, always do the least surprising thing&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The easiest programs to use are those that demand the least new learning from the user — or, to put it another way, the easiest programs to use are those that most effectively connect to the user&#x27;s pre-existing knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, avoid gratuitous novelty and excessive cleverness in interface design. If you&#x27;re writing a calculator program, ‘+’ should always mean addition! When designing an interface, model it on the interfaces of functionally similar or analogous programs with which your users are likely to be familiar.&lt;&#x2F;p&gt;
&lt;p&gt;Pay attention to your expected audience. They may be end users, they may be other programmers, or they may be system administrators. What is least surprising can differ among these groups.&lt;&#x2F;p&gt;
&lt;p&gt;Pay attention to tradition. The Unix world has rather well-developed conventions about things like the format of configuration and run-control files, command-line switches, and the like. These traditions exist for a good reason: to tame the learning curve. Learn and use them.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-silence&quot;&gt;Rule of Silence&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;When a program has nothing surprising to say, it should say nothing&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;One of Unix&#x27;s oldest and most persistent design rules is that when a program has nothing interesting or surprising to say, it should shut up. Well-behaved Unix programs do their jobs unobtrusively, with a minimum of fuss and bother. Silence is golden.&lt;&#x2F;p&gt;
&lt;p&gt;Well-designed programs treat the user&#x27;s attention and concentration as a precious and limited resource, only to be claimed when necessary.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-repair&quot;&gt;Rule of Repair&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Repair what you can — but when you must fail, fail noisily and as soon as possible&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Write your software to cope with incorrect inputs and its own execution errors as gracefully as possible. But when it cannot, make it fail in a way that makes diagnosis of the problem as easy as possible.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-economy&quot;&gt;Rule of Economy&lt;&#x2F;h1&gt;
&lt;p&gt;Programmer time is expensive; conserve it in preference to machine time&lt;&#x2F;p&gt;
&lt;p&gt;One other obvious way to conserve programmer time is to teach machines how to do more of the low-level work of programming. This leads to...&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-generation&quot;&gt;Rule of Generation&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Avoid hand-hacking; write programs to write programs when you can&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Human beings are notoriously bad at sweating the details. Accordingly, any kind of hand-hacking of programs is a rich source of delays and errors. The simpler and more abstracted your program specification can be, the more likely it is that the human designer will have gotten it right. Generated code (at every level) is almost always cheaper and more reliable than hand-hacked.&lt;&#x2F;p&gt;
&lt;p&gt;In the Unix tradition, code generators are heavily used to automate error-prone detail work. Parser&#x2F;lexer generators are the classic examples; makefile generators and GUI interface builders are newer ones.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-optimization&quot;&gt;Rule of Optimization&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Prototype before polishing. Get it working before you optimize it&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the Unix world there is a long-established and very explicit tradition (exemplified by Rob Pike&#x27;s comments above and Ken Thompson&#x27;s maxim about brute force) that says: &lt;strong&gt;Prototype, then polish. Get it working before you optimize it. Or: Make it work first, then make it work fast&lt;&#x2F;strong&gt;. ‘Extreme programming&#x27; guru Kent Beck, operating in a different culture, has usefully amplified this to: “Make it run, then make it right, then make it fast”.&lt;&#x2F;p&gt;
&lt;p&gt;Using prototyping to learn which features you don&#x27;t have to implement helps optimization for performance; you don&#x27;t have to optimize what you don&#x27;t write. The most powerful optimization tool in existence may be the delete key.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-diversity&quot;&gt;Rule of Diversity&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Distrust all claims for “one true way” &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Even the best software tools tend to be limited by the imaginations of their designers. Nobody is smart enough to optimize for everything, nor to anticipate all the uses to which their software might be put. Designing rigid, closed software that won&#x27;t talk to the rest of the world is an unhealthy form of arrogance.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, the Unix tradition includes a healthy mistrust of “one true way” approaches to software design or implementation. It embraces multiple languages, open extensible systems, and customization hooks everywhere.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rule-of-extensibility&quot;&gt;Rule of Extensibility&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Design for the future, because it will be here sooner than you think&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If it is unwise to trust other people&#x27;s claims for “one true way”, it&#x27;s even more foolish to believe them about your own designs. Never assume you have the final answer. Therefore, leave room for your data formats and code to grow; otherwise, you will often find that you are locked into unwise early choices because you cannot change them while maintaining backward compatibility.&lt;&#x2F;p&gt;
&lt;p&gt;When you design protocols or file formats, make them sufficiently self-describing to be extensible. Always, always either include a version number, or compose the format from self-contained, self-describing clauses in such a way that new clauses can be readily added and old ones dropped without confusing format-reading code. Unix experience tells us that the marginal extra overhead of making data layouts self-describing is paid back a thousandfold by the ability to evolve them forward without breaking things.&lt;&#x2F;p&gt;
&lt;p&gt;When you design code, organize it so future developers will be able to plug new functions into the architecture without having to scrap and rebuild the architecture. This rule is not a license to add features you don&#x27;t yet need; it&#x27;s advice to write your code so that adding features later when you do need them is easy. Make the joints flexible, and put “If you ever need to...” comments in your code. You owe this grace to people who will use and maintain your code after you.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll be there in the future too, maintaining code you may have half forgotten under the press of more recent projects. When you design for the future, the sanity you save may be your own.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Basics of the Unix Philosophy Chapter 1. Philosophy&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;%7Eesr&#x2F;writings&#x2F;taoup&#x2F;html&#x2F;ch01s06.html&quot;&gt;ers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Notes on Programming in C.&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.lysator.liu.se&#x2F;c&#x2F;pikestyle.html&quot;&gt;pyke&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>bill evans</title>
		<published>2021-03-02T00:00:00+00:00</published>
		<updated>2021-03-02T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;the-creative-process-and-self-teaching&quot;&gt;The Creative Process and Self-Teaching&lt;&#x2F;h1&gt;
&lt;p&gt;Evans discusses the step-by-step process of creative problem-solving.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; title=&quot;Bill Evans on the creative process&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YEHWaGuurUk&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i2.wp.com&#x2F;www.caravanjazz.es&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;09&#x2F;Bill-Evans.jpg&quot; alt=&quot;bill evans on creative process&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/bill-evans/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/bill-evans/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;the-creative-process-and-self-teaching&quot;&gt;The Creative Process and Self-Teaching&lt;&#x2F;h1&gt;
&lt;p&gt;Evans discusses the step-by-step process of creative problem-solving.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; title=&quot;Bill Evans on the creative process&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YEHWaGuurUk&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i2.wp.com&#x2F;www.caravanjazz.es&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;09&#x2F;Bill-Evans.jpg&quot; alt=&quot;bill evans on creative process&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;be-real-and-true&quot;&gt;Be real and true&lt;&#x2F;h1&gt;
&lt;p&gt;People tend to approximate the product rather than attacking it in a realistic, true way at any elementary level — regardless of how elementary — but it must be entirely true and entirely real and entirely accurate. &lt;strong&gt;They would rather approximate the entire problem than to take a small part of it and be real and true about it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;if-you-re-confused-you-won-t-find-your-way-out&quot;&gt;If you&#x27;re confused, you won&#x27;t find your way out&lt;&#x2F;h1&gt;
&lt;p&gt;To approximate the whole thing in a vague way gives you a feeling that you’ve more or less touched the thing, but in this way &lt;strong&gt;you just lead yourself toward confusion&lt;&#x2F;strong&gt; and ultimately you’re going to get so confused that you’ll never find your way out.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;build-on-what-you-know&quot;&gt;Build on what you know&lt;&#x2F;h1&gt;
&lt;p&gt;They’re trying to do a thing in a way that is so general [that] they can’t possibly build on that. If they build on that, they’re building on top of confusion and vagueness and they can’t possibly progress. &lt;strong&gt;If you try to approximate something that is very advanced and don’t know what you’re doing, you can’t advance.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;subconscious&quot;&gt;Subconscious&lt;&#x2F;h1&gt;
&lt;p&gt;The whole process of learning the facility to play jazz, is to &lt;strong&gt;take these problems from the outer level in&lt;&#x2F;strong&gt;, one by one, and to stay with it at a very intense conscience concentration level, &lt;strong&gt;until that process becomes secondary and subconscious&lt;&#x2F;strong&gt;. Now, when that becomes subconscious, then you can begin concentrating on that next problem, which will allow you to do a little bit more…&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;p&gt;Additional reading.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;animationresources.org&#x2F;theory-bill-evans-on-the-creative-process-and-self-teaching&#x2F;&quot;&gt;animation resources&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.brainpickings.org&#x2F;2014&#x2F;10&#x2F;30&#x2F;the-universal-mind-of-bill-evans&#x2F;&quot;&gt;brain picknigs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.presentationzen.com&#x2F;presentationzen&#x2F;2016&#x2F;05&#x2F;the-creative-process.html&quot;&gt;presentationzen&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>gatto</title>
		<published>2021-02-22T00:00:00+00:00</published>
		<updated>2021-02-22T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;the-six-lesson-schoolteacher&quot;&gt;The Six-Lesson Schoolteacher&lt;&#x2F;h1&gt;
&lt;p&gt;Based on an essay found in the Fall &#x27;91 issue of Whole Earth Review . This is an extract, read the full text.&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/gatto/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/gatto/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;the-six-lesson-schoolteacher&quot;&gt;The Six-Lesson Schoolteacher&lt;&#x2F;h1&gt;
&lt;p&gt;Based on an essay found in the Fall &#x27;91 issue of Whole Earth Review &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. This is an extract, read the full text.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;strong&gt;Before reading, please set your irony detector to the on position.&lt;&#x2F;strong&gt; If you find yourself inclined to dismiss the below as paranoid, you should know that the design behind the current American school system is very well-documented historically, in published writings of dizzying cynicism by such well-known figures as Horace Mann and Andrew Carnegie. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-lesson&quot;&gt;First lesson&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stay in the class where you belong&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I don&#x27;t know who decides that my kids belong there but that&#x27;s not my business. The children are numbered so that if any get away they can be returned to the right class. &lt;&#x2F;p&gt;
&lt;p&gt;In any case, again, that&#x27;s not my business. My job is to make the kids like it -- being locked in together, I mean -- or at the minimum, endure it. If things go well, the kids can&#x27;t imagine themselves anywhere else; they envy and fear the better classes and have contempt for the dumber classes. So the class mostly keeps itself in good marching order. That&#x27;s the real lesson of any rigged competition like school. You come to know your place. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The lesson of numbered classes is that there is no way out of your class except by magic. Until that happens you must stay where you are put.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;second-lesson&quot;&gt;Second lesson&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Turn on and off like a light switch&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I demand that they become totally involved in my lessons, jumping up and down in their seats with anticipation, competing vigorously with each other for my favor. But when the bell rings I insist that they drop the work at once and proceed quickly to the next work station. &lt;strong&gt;Nothing important is ever finished in my class, nor in any other class I know of.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;third-lesson&quot;&gt;Third lesson&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Surrender your will to a predestined chain of command&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Rights may be granted or withheld, by authority, without appeal. As a schoolteacher I intervene in many personal decisions, issuing a Pass for those I deem legitimate, or initiating a disciplinary confrontation for behavior that threatens my control. My judgments come thick and fast, because individuality is trying constantly to assert itself in my classroom. &lt;strong&gt;Individuality is a curse to all systems of classification, a contradiction of class theory.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fourth-lesson&quot;&gt;Fourth lesson&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I determine what curriculum you will study&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;(Rather, I enforce decisions transmitted by the people who pay me). This power lets me separate good kids from bad kids instantly. Good kids do the tasks I appoint with a minimum of conflict and a decent show of enthusiasm. Of the millions of things of value to learn, I decide what few we have time for. The choices are mine. Curiosity has no important place in my work, only conformity.&lt;&#x2F;p&gt;
&lt;p&gt;Bad kids fight against this, of course, trying openly or covertly to make decisions for themselves about what they will learn. How can we allow that and survive as schoolteachers? Fortunately there are procedures to break the will of those who resist. &lt;&#x2F;p&gt;
&lt;p&gt;This is another way I teach the lesson of dependency. &lt;strong&gt;Good people wait for a teacher to tell them what to do.&lt;&#x2F;strong&gt; This is the most important lesson of all, that we must wait for other people, better trained than ourselves, to make the meanings of our lives. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;fifth-lesson&quot;&gt;Fifth lesson&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Your self-respect should depend on an observer&#x27;s measure of your worth&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;My kids are constantly evaluated and judged.&lt;&#x2F;strong&gt; A monthly report, impressive in its precision, is sent into students&#x27; homes to spread approval or to mark exactly -- down to a single percentage point -- how dissatisfied with their children parents should be.&lt;&#x2F;p&gt;
&lt;p&gt;Self-evaluation -- the staple of every major philosophical system that ever appeared on the planet -- is never a factor in these things. The lesson of report cards, grades, and tests is that children should not trust themselves or their parents, but must rely on the evaluation of certified officials. &lt;strong&gt;People need to be told what they are worth.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sixth-lesson&quot;&gt;Sixth lesson&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I teach children that they are being watched &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I keep each student under constant surveillance and so do my colleagues. There are no private spaces for children; there is no private time. Class change lasts 300 seconds to keep promiscuous fraternization at low levels. Students are encouraged to tattle on each other, even to tattle on their parents. Of course I encourage parents to file their own child&#x27;s waywardness, too. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I assign &amp;quot;homework&amp;quot; so that this surveillance extends into the household, where students might otherwise use the time to learn something unauthorized&lt;&#x2F;strong&gt;, perhaps from a father or mother, or by apprenticing to some wiser person in the neighborhood. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The lesson of constant surveillance is that no one can be trusted, that privacy is not legitimate.&lt;&#x2F;strong&gt; Surveillance is an ancient urgency among certain influential thinkers; it was a central prescription set down by Calvin in the Institutes, by Plato in the Republic, by Hobbes, by Comte, by Francis Bacon. All these childless men discovered the same thing: Children must be closely watched if you want to keep a society under central control. &lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Thanks to Nathan Myers&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.cantrip.org&#x2F;gatto.html&quot;&gt;gatto&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>smart questions</title>
		<published>2020-12-20T00:00:00+00:00</published>
		<updated>2020-12-20T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;p&gt;How To Ask Questions The Smart Way , by ESR.&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/smart-questions/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/smart-questions/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;p&gt;How To Ask Questions The Smart Way &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, by ESR.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Notes, commentary and personal adaptation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;before-you-ask&quot;&gt;Before you ask&lt;&#x2F;h2&gt;
&lt;p&gt;Before asking a techincal question:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Try to find an answer by searching the archives of the forum or mailing list you plan to post to.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Try to find an answer by searching the Web.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Try to find an answer by reading the manual.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Try to find an answer by reading a FAQ.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Try to find an answer by inspection or experimentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Try to find an answer by asking a skilled friend.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you&#x27;re a programmer, try to find an answer by reading the source code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When you ask your question, &lt;strong&gt;display the fact that you have done these things first&lt;&#x2F;strong&gt;; this will help establish that you&#x27;re not being a lazy sponge and wasting people&#x27;s time. Better yet, &lt;strong&gt;display what you have learned from doing these things&lt;&#x2F;strong&gt;. We like answering questions for people who have demonstrated they can learn from the answers.&lt;&#x2F;p&gt;
&lt;p&gt;Take your time. Do not expect to be able to solve a complicated problem with a few seconds of Googling.&lt;&#x2F;p&gt;
&lt;p&gt;Prepare your question. Think it through. The more you do to demonstrate that having put thought and effort into solving your problem before seeking help, the more likely you are to actually get help.&lt;&#x2F;p&gt;
&lt;p&gt;Beware of asking the wrong question. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;&#x2F;p&gt;
&lt;p&gt;Never assume you are entitled to an answer. &lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, making it clear that you are able and willing to help in the process of developing the solution is a very good start. &lt;strong&gt;“Would someone provide a pointer?”, “What is my example missing?”, and “What site should I have checked?”&lt;&#x2F;strong&gt; are more likely to get answered than “Please post the exact procedure I should use.” because you&#x27;re making it clear that you&#x27;re truly willing to complete the process if someone can just point you in the right direction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-you-ask&quot;&gt;When you ask&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choose your forum carefully&lt;&#x2F;strong&gt;: Don&#x27;t ask a technical questions in the wrong forum.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t trust stack overflow&lt;&#x2F;strong&gt;: People post easy to copy and paste code but don&#x27;t explain the answer. Deprecated answers for frameworks and libraries. Low quality explanations missing the fundamentals. Take all the answers with a grain of salt.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web and IRC forums, Slack&lt;&#x2F;strong&gt;: If you can interact with the main developers of an open source project do it. You can assert their knowladge in the problem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use meaningful, specific subject headers&lt;&#x2F;strong&gt;: Be SMART, specific in versions and errors. Use key words.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make it easy to reply&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write in clear, grammatical, correctly-spelled language&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Send question in accesible, standard formats&lt;&#x2F;strong&gt;: Open source projects usually have templates for issues. Use them. Adopt them in your own projects.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be precise and infromative about your problem&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Describe the symptoms of your problem or bug carefully and clearly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Describe the environment in which it occurs (machine, OS, application, whatever). Provide your vendor&#x27;s distribution and release level (e.g.: “Fedora Core 7”, “Slackware 9.1”, etc.).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Describe the research you did to try and understand the problem before you asked the question.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Describe the diagnostic steps you took to try and pin down the problem yourself before you asked the question.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Describe any possibly relevant recent changes in your computer or software configuration.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If at all possible, provide a way to reproduce the problem in a controlled environment. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t rush to claim that you have found a bug&lt;&#x2F;strong&gt;: When you are having problems with a piece of software, don&#x27;t claim you have found a bug unless you are very, very sure of your ground. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Hint: unless you can provide a source-code patch that fixes the problem, or a regression test against a previous version that demonstrates incorrect behavior, you are probably not sure enough. This applies to webpages and documentation, too; if you have found a documentation “bug”, you should supply replacement text and which pages it should go on.&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe the problem&#x27;s symptoms, not your guesses&lt;&#x2F;strong&gt;: Another example of &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. It&#x27;s not useful to tell hackers what you think is causing your problem. So, make sure you&#x27;re telling them the raw symptoms of what goes wrong, rather than your interpretations and theories. Let them do the interpretation and diagnosis. If you feel it&#x27;s important to state your guess, clearly label it as such and describe why that answer isn&#x27;t working for you.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe your problem&#x27;s symptoms in chronological order&lt;&#x2F;strong&gt;: The clues most useful in figuring out something that went wrong often lie in the events immediately prior. So, your account should describe precisely what you did, and what the machine and software did, leading up to the blowup. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe the goal, not the step&lt;&#x2F;strong&gt;: If you are trying to find out how to do something (as opposed to reporting a bug), begin by describing the goal. Only then describe the particular step towards it that you are blocked on.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be explicit about your question&lt;&#x2F;strong&gt;: Open-ended questions tend to be perceived as open-ended time sinks. Those people most likely to be able to give you a useful answer are also the busiest people (if only because they take on the most work themselves). &lt;&#x2F;p&gt;
&lt;p&gt;You are more likely to get a useful response if you are explicit about what you want respondents to do (provide pointers, send code, check your patch, whatever). This will focus their effort and implicitly put an upper bound on the time and energy a respondent must allocate to helping you. This is good.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;When asking about code&lt;&#x2F;strong&gt;: The most effective way to be precise about a code problem is to &lt;strong&gt;provide a minimal bug-demonstrating test case&lt;&#x2F;strong&gt;. How do you make a minimal test case? If you know what line or section of code is producing the problematic behavior, make a copy of it and add just enough supporting code to produce a complete example. If you can&#x27;t narrow it down to a particular section, make a copy of the source and start removing chunks that don&#x27;t affect the problematic behavior. *&lt;em&gt;The smaller your minimal test case is, the better&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Generating a really small minimal test case will not always be possible, but trying to is good discipline. It may help you learn what you need to solve the problem on your own — and even when it doesn&#x27;t, hackers like to see that you have tried. It will make them more cooperative.&lt;&#x2F;p&gt;
&lt;p&gt;If you simply want a code review, say as much up front, and be sure to mention what areas you think might particularly need review and why.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prune pointless queries&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Courtesy never hurts, and sometimes helps&lt;&#x2F;strong&gt;: Please, Thank you.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Follow up with a brief note on the solution&lt;&#x2F;strong&gt;: When you already found a valid solution or explored a hint, update your original question to let the people who helped you know what the answer was. Let your research be useful.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-interpret-answers&quot;&gt;How to interpret answers&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RTFM&lt;&#x2F;strong&gt;: If you are told to RTFM, then RTFM&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If you don&#x27;t understand...&lt;&#x2F;strong&gt;: If you don&#x27;t understand the answer, do not immediately bounce back a demand for clarification. Use the same tools that you used to try and answer your original question (manuals, FAQs, the Web, skilled friends) to understand the answer. Then, if you still need to ask for clarification, &lt;strong&gt;exhibit what you have learned&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dealing with rudeness&lt;&#x2F;strong&gt;: Much of what looks like rudeness in hacker circles is not intended to give offense. Rather, it&#x27;s the product of the direct, cut-through-the-bullshit communications style that is natural to people who are more concerned about solving problems than making others feel warm and fuzzy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;questions-not-to-ask&quot;&gt;Questions not to ask&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Where can I find program or resource X?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: How can I use X to do Y?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: How can I configure my shell prompt?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: Can I convert an AcmeCorp document into a TeX file using the Bass-o-matic file converter?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: My {program, configuration, SQL statement} doesn&#x27;t work&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: I&#x27;m having problems with my Windows machine. Can you help?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: My program doesn&#x27;t work. I think system facility X is broken.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: I&#x27;m having problems installing Linux or X. Can you help?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: How can I crack root&#x2F;steal channel-ops privileges&#x2F;read someone&#x27;s e-mail?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-answer-questions-in-a-helpful-way&quot;&gt;How to answer questions in a helpful way&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be gentle&lt;&#x2F;strong&gt;. Problem-related stress can make people seem rude or stupid even when they&#x27;re not.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Reply to a first offender off-line. There is no need of public humiliation for someone who may have made an honest mistake. A real newbie may not know how to search archives or where the FAQ is stored or posted.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If you don&#x27;t know for sure, say so!&lt;&#x2F;strong&gt; A wrong but authoritative-sounding answer is worse than none at all. Don&#x27;t point anyone down a wrong path simply because it&#x27;s fun to sound like an expert. Be humble and honest; set a good example for both the querent and your peers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If you can&#x27;t help, don&#x27;t hinder.&lt;&#x2F;strong&gt; Don&#x27;t make jokes about procedures that could trash the user&#x27;s setup — the poor sap might interpret these as instructions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ask probing questions to elicit more details&lt;&#x2F;strong&gt;. If you&#x27;re good at this, the querent will learn something — and so might you. Try to turn the bad question into a good one; remember we were all newbies once.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;While muttering RTFM is sometimes justified when replying to someone who is just a lazy slob, a pointer to documentation (even if it&#x27;s just a suggestion to google for a key phrase) is better.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If you&#x27;re going to answer the question at all, give good value&lt;&#x2F;strong&gt;. Don&#x27;t suggest kludgy workarounds when somebody is using the wrong tool or approach. Suggest good tools. Reframe the question.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Answer the actual question!&lt;&#x2F;strong&gt; If the querent has been so thorough as to do his or her research and has included in the query that X, Y, Z, A, B, and C have already been tried without good result, it is supremely unhelpful to respond with “Try A or B,” or with a link to something that only says, “Try X, Y, Z, A, B, or C.”.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Help your community learn from the question&lt;&#x2F;strong&gt;. When you field a good question, ask yourself “How would the relevant documentation or FAQ have to change so that nobody has to answer this again?” Then send a patch to the document maintainer.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If you did research to answer the question, demonstrate your skills rather than writing as though you pulled the answer out of your butt&lt;&#x2F;strong&gt;. Answering one good question is like feeding a hungry person one meal, but teaching them research skills by example is showing them how to grow food for a lifetime.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;How To Ask Questions The Smart Way by Eric Steven Raymond&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;questions&lt;&#x2F;a&gt; 
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;em&gt;The XY Problem&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;xyproblem.info&#x2F;#&quot;&gt;xy-problem&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>worse is better</title>
		<published>2020-12-15T00:00:00+00:00</published>
		<updated>2020-12-15T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;p&gt;The rise of &amp;quot;Worse is better&amp;quot;, by Richard Gabriel&lt;&#x2F;p&gt;
&lt;p&gt;In the commentary Richard introduces and compares different schools of design and philosophies applied to software engineering.&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/worse-is-better/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/worse-is-better/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;p&gt;The rise of &amp;quot;Worse is better&amp;quot;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, by Richard Gabriel&lt;&#x2F;p&gt;
&lt;p&gt;In the commentary Richard introduces and compares different schools of design and philosophies applied to software engineering.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;right-thing-philosophy&quot;&gt;Right thing philosophy&lt;&#x2F;h1&gt;
&lt;p&gt;The essence of this style can be captured by the phrase &amp;quot;the right thing.&amp;quot;.Most programmers (lisp) have an extreme exposure to the MIT&#x2F;Stanford style of design. To such a designer it is important to get all of the following characteristics right:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplicity&lt;&#x2F;strong&gt;: The design must be simple. Both in implementation and interface. It is more important for the interface to be simple than the implementation&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Correctness&lt;&#x2F;strong&gt;: The design must be correct in all observable aspects. Incorrectness is simply not allowed&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;: The desgin must not be inconsistent. A design is allowed to be slightly less simple and less complete to avoid inconsitency. Consistency is as important as correctness&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completeness&lt;&#x2F;strong&gt;: The desgin must cover as many important situations as is practical. All reasonably expected cases must be covered. Simplicity is not allowed to ovelry reduce completeness&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;worse-is-better-philosophy&quot;&gt;Worse is better philosophy&lt;&#x2F;h1&gt;
&lt;p&gt;Slightly different from the &amp;quot;MIT approach&amp;quot;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplicity&lt;&#x2F;strong&gt;: The design must be simple, both in implementation and interface. It is more important for the implementation to be simple than the interface. Simplicity is the most important consideration in a design&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Correctness&lt;&#x2F;strong&gt;: The design must be correct in all observable aspects. It is slightly better to be simple than correct &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;: The design must not be overly inconsistent. Consistency can be sacrificed for simplicity in some cases, but it is better to drop those parts of the design that deal with less common circumstances than to introduce either implementational complexity or inconsistency &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completeness&lt;&#x2F;strong&gt;: The design must cover as many important situations as is practical. All reasonably expected cases should be covered. Completeness can be sacrificed in favor of any other quality. In fact, completeness must sacrificed whenever implementation simplicity is jeopardized. Consistency can be sacrificed to achieve completeness if simplicity is retained&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Early Unix and C are examples of the use of this school of design, Richard calls this school &lt;strong&gt;&amp;quot;New Jersey approach&amp;quot;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;The Rise of &amp;quot;Worse is Better&amp;quot; By Richard Gabriel&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.jwz.org&#x2F;doc&#x2F;worse-is-better.html&quot;&gt;worse-is-better&lt;&#x2F;a&gt; &lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>style</title>
		<published>2020-12-03T00:00:00+00:00</published>
		<updated>2020-12-03T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;p&gt;Tutorial on Good Lisp Programming style. (1993)&lt;&#x2F;p&gt;
&lt;p&gt;Peter Norvig.&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/style/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/style/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;p&gt;Tutorial on Good Lisp Programming style. (1993)&lt;&#x2F;p&gt;
&lt;p&gt;Peter Norvig.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;what-is-good-style&quot;&gt;What is good style?&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;good-programming-style&quot;&gt;Good programming style&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Elegance is not optional&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Good style in any language leads to programs that are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Understandable&lt;&#x2F;li&gt;
&lt;li&gt;Reusable&lt;&#x2F;li&gt;
&lt;li&gt;Extensible&lt;&#x2F;li&gt;
&lt;li&gt;Efficient&lt;&#x2F;li&gt;
&lt;li&gt;Easy to develop&#x2F;debug&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It also helps correctness, robustness, compability. Our maxims of good style are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Be explicit&lt;&#x2F;li&gt;
&lt;li&gt;Be specific&lt;&#x2F;li&gt;
&lt;li&gt;Be concise&lt;&#x2F;li&gt;
&lt;li&gt;Be consistent&lt;&#x2F;li&gt;
&lt;li&gt;Be helpful (anticipate the reader&#x27;s needs)&lt;&#x2F;li&gt;
&lt;li&gt;Be conventional (don&#x27;t be obscure)&lt;&#x2F;li&gt;
&lt;li&gt;Build abstractions at a usable level&lt;&#x2F;li&gt;
&lt;li&gt;Allow tools to interact (referential transperency)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-to-believe&quot;&gt;What to believe&lt;&#x2F;h2&gt;
&lt;p&gt;Don&#x27;t believe everything we tell you. Worry less about what to believe and more about why. Know where your &amp;quot;style rules&amp;quot; come from:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Religion&lt;&#x2F;strong&gt;, Good vs Evil &amp;quot;This way is better.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Philosophy&lt;&#x2F;strong&gt; &amp;quot;This is consistent with other things.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Robustness&lt;&#x2F;strong&gt;, &lt;strong&gt;Liability&lt;&#x2F;strong&gt;, &lt;strong&gt;Safety&lt;&#x2F;strong&gt;, &lt;strong&gt;Ethics&lt;&#x2F;strong&gt; &amp;quot;I&#x27;ll put in redundant checks to avoid something horrible.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Legality&lt;&#x2F;strong&gt; &amp;quot;Our lawyers say do it this way.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Personality&lt;&#x2F;strong&gt;, Opinion &amp;quot;I like it this way.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Compability&lt;&#x2F;strong&gt; &amp;quot;Another tool expect this way.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Portability&lt;&#x2F;strong&gt; &amp;quot;Other compilers prefer this way.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cooperatin&lt;&#x2F;strong&gt;, &lt;strong&gt;Convention&lt;&#x2F;strong&gt; &amp;quot;It has to be done some uniform way, so we agreed on this one.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Habit&lt;&#x2F;strong&gt;, &lt;strong&gt;Tradition&lt;&#x2F;strong&gt; &amp;quot;We&#x27;ve always done it this way.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ability&lt;&#x2F;strong&gt; &amp;quot;My programmers aren&#x27;t sophisticated enough.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;&#x2F;strong&gt; &amp;quot;Knowing how I would do it means I don&#x27;t have to remember how I did do it.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Supersticion&lt;&#x2F;strong&gt; &amp;quot;I&#x27;m scared to do it differently.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Practicality&lt;&#x2F;strong&gt; &amp;quot;This makes other things easier.&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;it-s-all-about-communication&quot;&gt;It&#x27;s all about communication&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Expression + Undestanding = Commincation&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Programs communicate with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Human readers&lt;&#x2F;li&gt;
&lt;li&gt;Compilers&lt;&#x2F;li&gt;
&lt;li&gt;Text editors&lt;&#x2F;li&gt;
&lt;li&gt;Tools&lt;&#x2F;li&gt;
&lt;li&gt;Users of the program &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;know-the-context&quot;&gt;Know the context&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When reading code&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Know who wrote it and when.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When writing code&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Annotate it with comments, sign and date your comments.&lt;&#x2F;p&gt;
&lt;p&gt;Some things to notice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;People&#x27;s style change over time&lt;&#x2F;li&gt;
&lt;li&gt;The same person at different times can seem like a different person&lt;&#x2F;li&gt;
&lt;li&gt;Sometimes that person is you&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;value-systems-are-not-absolute&quot;&gt;Value systems are not absolute&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Style rules cannot be viewed in isolation. They often overlap in conflicting ways.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The fact that style rules conflict with one another reflect the natural fact that real-world goals conflict. A good programmer makes trade-offs in programming style that reflect underlying priority choices among various major goals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Understandable&lt;&#x2F;li&gt;
&lt;li&gt;Reusable&lt;&#x2F;li&gt;
&lt;li&gt;Extensible&lt;&#x2F;li&gt;
&lt;li&gt;Efficient(coding, space, speed, ...)&lt;&#x2F;li&gt;
&lt;li&gt;Easy to develop&#x2F;debug&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-good-style-is-good&quot;&gt;Why good style is good&lt;&#x2F;h2&gt;
&lt;p&gt;Good style helps build the current program, and the next one:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Organizes a program, relieving human memory needs&lt;&#x2F;li&gt;
&lt;li&gt;Encourages modular, reusable parts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Style is not just added at the end. it plays a part in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Organization of the program into files&lt;&#x2F;li&gt;
&lt;li&gt;Top-level design, structure and layout of each file&lt;&#x2F;li&gt;
&lt;li&gt;Decompositon into modules and components&lt;&#x2F;li&gt;
&lt;li&gt;Data-structure choice&lt;&#x2F;li&gt;
&lt;li&gt;Individual function design&#x2F;implementation&lt;&#x2F;li&gt;
&lt;li&gt;Naming, formatting and documenting standards&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-style-is-practical-memory&quot;&gt;Why style is practical: memory&lt;&#x2F;h2&gt;
&lt;p&gt;Good style replaces the need for great memory:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure any lines are self-explanatory. Also called &amp;quot;referential transperency&amp;quot;. Package complexity into objects and abstractions; not global variables&#x2F;dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Make it &amp;quot;fractally&amp;quot; self-organizing all the way up&#x2F;down&lt;&#x2F;li&gt;
&lt;li&gt;Say what you mean&lt;&#x2F;li&gt;
&lt;li&gt;Mean what you say&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-style-is-practical-reuse&quot;&gt;Why style is practical: reuse&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Structured programming&lt;&#x2F;strong&gt; encourages modules that meet specifications and can be reused within the bounds of that specification.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Stratified design&lt;&#x2F;strong&gt; encourages modules with commonly-needed functionality, which can be reused even when teh specificationi changes, or in another program.&lt;&#x2F;p&gt;
&lt;p&gt;You should aim to reuse:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data types&lt;&#x2F;li&gt;
&lt;li&gt;Functions&lt;&#x2F;li&gt;
&lt;li&gt;Control abstractions&lt;&#x2F;li&gt;
&lt;li&gt;Interface abstractions (packages, modules)&lt;&#x2F;li&gt;
&lt;li&gt;Syntactic abstrations (macros and whole languages)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;say-what-you-mean&quot;&gt;Say what you mean&lt;&#x2F;h2&gt;
&lt;p&gt;Say what you mean in &lt;strong&gt;data&lt;&#x2F;strong&gt; (be sepcific, concise):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use data abstractions&lt;&#x2F;li&gt;
&lt;li&gt;Define langauges for data, if needed&lt;&#x2F;li&gt;
&lt;li&gt;Choose names wisely&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Say what you mean in &lt;strong&gt;code&lt;&#x2F;strong&gt; (be concise, conventional):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Define interfaces clearly&lt;&#x2F;li&gt;
&lt;li&gt;Use macrso and languages appropriately&lt;&#x2F;li&gt;
&lt;li&gt;Use built-in functions&lt;&#x2F;li&gt;
&lt;li&gt;Creater your own abstractions&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27; do it twice if you can do it once&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In &lt;strong&gt;annotations&lt;&#x2F;strong&gt; (be explicit, helpful):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use appropiate detail for comments&lt;&#x2F;li&gt;
&lt;li&gt;Documentation strings are better tha comments&lt;&#x2F;li&gt;
&lt;li&gt;Say what it is for, not just what it does&lt;&#x2F;li&gt;
&lt;li&gt;Declarations and assertions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;be-explicit&quot;&gt;Be explicit&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;optional-and-keyword-arguments&quot;&gt;Optional and keyword arguments&lt;&#x2F;h3&gt;
&lt;p&gt;If you have to loop up the default value, you need to supply it. You should only take teh default if you truly believe you don&#x27;t care or if you&#x27;re sure the default is well-understood and well-accepted by all.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;declarations&quot;&gt;Declarations&lt;&#x2F;h3&gt;
&lt;p&gt;If you know type information, declare it. Don&#x27;t do what some people do and only declare things you know the compiler will use. Compilers change, and you want your program to naturally take advantage of those changes without the need for ongoing intervention.&lt;&#x2F;p&gt;
&lt;p&gt;Also, declarations are for communication with human readers too.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;&#x2F;h3&gt;
&lt;p&gt;If you&#x27;re thinking of something useful that others might want to know when they read your code and that might not be instantly apparent to them, make it a comment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-specific&quot;&gt;Be specific&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Be as specific as your data abstractions warrant, but no more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;be-concise&quot;&gt;Be concise&lt;&#x2F;h2&gt;
&lt;p&gt;Thest for the simplest case. If you make the same test in two places, there must be an easier way.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt; verbose, convoluted&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt; conventional, consistent&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;be-helpful&quot;&gt;Be helpful&lt;&#x2F;h2&gt;
&lt;p&gt;Documetnation should be organized around tasks the user needs to do, not around what your program happens to provied. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-conventional&quot;&gt;Be conventional&lt;&#x2F;h2&gt;
&lt;p&gt;Build your own functionality to parallel existing features. Obey naming conventions. Use built-in functionality when possible:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conventional&lt;&#x2F;strong&gt; reader will know what you mean&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Concise&lt;&#x2F;strong&gt; reader doesn&#x27;t have to parse the code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Efficient&lt;&#x2F;strong&gt; has been worked on heavily&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;be-consistent&quot;&gt;Be consistent&lt;&#x2F;h2&gt;
&lt;p&gt;Be consisten about which operators you use in neutral cases so that it is apparent when you&#x27;re doing something unusual&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choose-the-right-language&quot;&gt;Choose the right language&lt;&#x2F;h2&gt;
&lt;p&gt;Choose the appropriate language, and use appropriate features int he language you choose. &lt;&#x2F;p&gt;
&lt;p&gt;Dynamic is &lt;strong&gt;good&lt;&#x2F;strong&gt; for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exploratory programming&lt;&#x2F;li&gt;
&lt;li&gt;Rapid prototyping&lt;&#x2F;li&gt;
&lt;li&gt;Minimizng time-to-market&lt;&#x2F;li&gt;
&lt;li&gt;Single-programer (or single-digit team) project&lt;&#x2F;li&gt;
&lt;li&gt;Source-to-source or data-to-data transformation
&lt;ul&gt;
&lt;li&gt;Compilers and other translators&lt;&#x2F;li&gt;
&lt;li&gt;Probelm-specific languages (DSL)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic dispatch and creation (compiler avilable at run-time)&lt;&#x2F;li&gt;
&lt;li&gt;Tight integration of modules in one image (as opposed to Unix&#x27;s character)&lt;&#x2F;li&gt;
&lt;li&gt;High degree of interaction (read-eval-print, CLIM)&lt;&#x2F;li&gt;
&lt;li&gt;user-extensible applications &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Dynamic is &lt;strong&gt;bad&lt;&#x2F;strong&gt; for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Persistent storage (data base)&lt;&#x2F;li&gt;
&lt;li&gt;Maximizing resouce use on small machines&lt;&#x2F;li&gt;
&lt;li&gt;Projects with hundred of programmers&lt;&#x2F;li&gt;
&lt;li&gt;Close communication with foreign code&lt;&#x2F;li&gt;
&lt;li&gt;Delivering small-image applicatoins&lt;&#x2F;li&gt;
&lt;li&gt;Real-time control &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;{: data-content=&amp;quot;Tips on built-in functionality&amp;quot;}&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-conditions-vs-errors&quot;&gt;Understanding conditions vs errors&lt;&#x2F;h2&gt;
&lt;p&gt;Learn the difference between &lt;strong&gt;errors&lt;&#x2F;strong&gt; and &lt;strong&gt;conditions&lt;&#x2F;strong&gt;. All errors are conditions; not all conditions are errors.&lt;&#x2F;p&gt;
&lt;p&gt;Distinguis three concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Signaling a condition, Detecting that something unusual has happened.&lt;&#x2F;li&gt;
&lt;li&gt;Providing a restart, Establishing one of possibly several options for continuing.&lt;&#x2F;li&gt;
&lt;li&gt;Handling a condition, selecting how to proceed form available options.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;error-detection&quot;&gt;Error detection&lt;&#x2F;h2&gt;
&lt;p&gt;Pick a level of error detection and handling that matches your intent. Usually you don&#x27;t want to let bad data go by, but in many cases you also don&#x27;t want to be in the debugger for inconsequential reasons.&lt;&#x2F;p&gt;
&lt;p&gt;Strike a balance between tolerance and pickiness that is appropiate to your apllication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;write-good-error-messages&quot;&gt;Write good error messages&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Use full sentences in error messages&lt;&#x2F;li&gt;
&lt;li&gt;No &amp;quot;error&amp;quot; or &amp;quot;;;&amp;quot; prefix. The system will supply such a prefix if needed.&lt;&#x2F;li&gt;
&lt;li&gt;Do not begin an error message with a request for a fresh line. &lt;&#x2F;li&gt;
&lt;li&gt;As with other format strings, don&#x27;t use embedded tab characters.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t mention the consequences in the error message. Just describe the situation itself.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t presuppose the debugger&#x27;s user interface in describing how to continue. This may cause portablity problems since different implementations use differnet interfaces.&lt;&#x2F;li&gt;
&lt;li&gt;Specify enough detail in the message to ditnguish it from other errors, and if you can, enough to help you debug the problem later if it happens&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;abstraction&quot;&gt;Abstraction&lt;&#x2F;h1&gt;
&lt;p&gt;All programming languages allow the programmer to define &lt;em&gt;abstractions&lt;&#x2F;em&gt;. All modern languages provide support for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data abstraction (abstract data types)&lt;&#x2F;li&gt;
&lt;li&gt;Functional abstraction (functions, procedures)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Lisp and other languages with closures support:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Control abstraction (defining iterators and otehr new flow of control constructs)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also Lisp is unique in the degree which it supports:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Synctatic abstraction (macros, whole new langauges)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-where-style-begins&quot;&gt;Design: where style begins&lt;&#x2F;h2&gt;
&lt;p&gt;Approaches:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data abstraction: classes, structures, deftype&lt;&#x2F;li&gt;
&lt;li&gt;Functional abstraction: functions, methods&lt;&#x2F;li&gt;
&lt;li&gt;Interface abstraction: packages, closures&lt;&#x2F;li&gt;
&lt;li&gt;Object-Oriented; CLOS, closures&lt;&#x2F;li&gt;
&lt;li&gt;Stratified design: closures, all of above&lt;&#x2F;li&gt;
&lt;li&gt;Delayed decisions: run-time dispatch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;desgin-decomposition&quot;&gt;Desgin: decomposition&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Strive for simple designs.&lt;&#x2F;li&gt;
&lt;li&gt;Break the problem int parts. Desgin useful subparts (stratified). Be opportuinistic. Use existing tools. &lt;&#x2F;li&gt;
&lt;li&gt;Determine dependecies. Re-modularize to reduce rependecies. Design most dependent parts first.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will cover the following kinds of abstraction:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data abstraction&lt;&#x2F;li&gt;
&lt;li&gt;Functional abstraction&lt;&#x2F;li&gt;
&lt;li&gt;Control abstraction&lt;&#x2F;li&gt;
&lt;li&gt;Syntactic abstraction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data-abstraction&quot;&gt;Data abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;Write code in terms of the problem&#x27;s data types, not the types that happen to be in the implementation.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use defstruct or defclass for record types&lt;&#x2F;li&gt;
&lt;li&gt;Use inline functions as aliases (not macros)&lt;&#x2F;li&gt;
&lt;li&gt;Use deftype&lt;&#x2F;li&gt;
&lt;li&gt;Use declarations and :type slots for efficiency and&#x2F;or documentation&lt;&#x2F;li&gt;
&lt;li&gt;Variable names give informal type information&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;functional-abstraction&quot;&gt;Functional abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;Every function should have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A single specific purpose&lt;&#x2F;li&gt;
&lt;li&gt;If possible, a generally useful purpose&lt;&#x2F;li&gt;
&lt;li&gt;A meaningful name&lt;&#x2F;li&gt;
&lt;li&gt;A structure that is simple to understand&lt;&#x2F;li&gt;
&lt;li&gt;An interface that is simple yet general enough&lt;&#x2F;li&gt;
&lt;li&gt;As few dependencies as possible&lt;&#x2F;li&gt;
&lt;li&gt;A documentation string&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;control-abstraction&quot;&gt;Control abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;Most algorithms can be characterized as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Searching (some find find-if mismatch)&lt;&#x2F;li&gt;
&lt;li&gt;Sorting (sort merge remove-duplicates)&lt;&#x2F;li&gt;
&lt;li&gt;Filtering (remove remove-if mapcan)&lt;&#x2F;li&gt;
&lt;li&gt;Mapping (map mapcar mapc)&lt;&#x2F;li&gt;
&lt;li&gt;Combining (reduce mapcan)&lt;&#x2F;li&gt;
&lt;li&gt;Counting (count count-if)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These functions abstract common control patterns. Code that use them is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Concise&lt;&#x2F;li&gt;
&lt;li&gt;Self-documenting&lt;&#x2F;li&gt;
&lt;li&gt;Easy to understand&lt;&#x2F;li&gt;
&lt;li&gt;Often reusable&lt;&#x2F;li&gt;
&lt;li&gt;Usually efficent&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;avoid-complicated-lambda-expressions&quot;&gt;Avoid complicated lambda expressions&lt;&#x2F;h3&gt;
&lt;p&gt;When a higher-order function would need a complicated lambda expression, consider alternatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;dolist or loop&lt;&#x2F;li&gt;
&lt;li&gt;generate an intermediate (garbage) sequence&lt;&#x2F;li&gt;
&lt;li&gt;Series&lt;&#x2F;li&gt;
&lt;li&gt;Macros or read macros&lt;&#x2F;li&gt;
&lt;li&gt;local function
&lt;ul&gt;
&lt;li&gt;Specific: makes it clear where function is used&lt;&#x2F;li&gt;
&lt;li&gt;Doesn&#x27;t clutter up global name space&lt;&#x2F;li&gt;
&lt;li&gt;Local variables needn&#x27;t be arguments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;syntactic-abstraction&quot;&gt;Syntactic abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Syntactic abstraction&lt;&#x2F;em&gt; defines a new language that is appropiate to the problem.&lt;&#x2F;p&gt;
&lt;p&gt;This is a problem-oriented (as opposed to code-oriented) approach.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-interpreter-for-simplifying&quot;&gt;An interpreter for simplifying&lt;&#x2F;h3&gt;
&lt;p&gt;Write an interpreter o a compiler to simplify your language.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simplification rules are easy to write&lt;&#x2F;li&gt;
&lt;li&gt;Control flow is abstracted away (mostly)&lt;&#x2F;li&gt;
&lt;li&gt;It is easy to verify the rules are correct&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;use-macros-appropriately&quot;&gt;Use macros appropriately&lt;&#x2F;h3&gt;
&lt;p&gt;The design of macros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Decide if a macro is really necessary&lt;&#x2F;li&gt;
&lt;li&gt;Pick a clear, consistent syntax for the macro&lt;&#x2F;li&gt;
&lt;li&gt;Figure out the right expansioin&lt;&#x2F;li&gt;
&lt;li&gt;Use defmacro and &#x27; to implement the mapping&lt;&#x2F;li&gt;
&lt;li&gt;In most cases also provide a functional interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Things to think about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#x27;t use a macro where a function would suffice&lt;&#x2F;li&gt;
&lt;li&gt;Make sure nothing is done at expansion time (mostly)&lt;&#x2F;li&gt;
&lt;li&gt;Evalute args left-to-right, once each (if at all)&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t clash with user names&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;macros-for-control-structures&quot;&gt;Macros for control structures&lt;&#x2F;h3&gt;
&lt;p&gt;Good to use if it fills a hole in orthogonality of your lang.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Iterates over a common data type&lt;&#x2F;li&gt;
&lt;li&gt;Follows established sytnax&lt;&#x2F;li&gt;
&lt;li&gt;Obeys declarations, returns&lt;&#x2F;li&gt;
&lt;li&gt;Extends established syntax with keyboards&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;programming-in-the-large&quot;&gt;Programming in the large&lt;&#x2F;h1&gt;
&lt;p&gt;Be aware of stages of software development:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Gathering requirements&lt;&#x2F;li&gt;
&lt;li&gt;Architecture&lt;&#x2F;li&gt;
&lt;li&gt;Component design&lt;&#x2F;li&gt;
&lt;li&gt;Implementation&lt;&#x2F;li&gt;
&lt;li&gt;Debugging&lt;&#x2F;li&gt;
&lt;li&gt;Tuning&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These can overlap. The point of exploratory programming is to minimize component design time, getting quickly to implmentation in order to decide if the architecture and requirements are right.&lt;&#x2F;p&gt;
&lt;p&gt;Know how to put together a large program:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using packages&lt;&#x2F;li&gt;
&lt;li&gt;Using defsystem&lt;&#x2F;li&gt;
&lt;li&gt;Separating source code into files&lt;&#x2F;li&gt;
&lt;li&gt;Documentation in the large&lt;&#x2F;li&gt;
&lt;li&gt;Portability&lt;&#x2F;li&gt;
&lt;li&gt;Error handling&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;using-comments-effectively&quot;&gt;Using comments effectively&lt;&#x2F;h2&gt;
&lt;p&gt;Use comments to&#x2F;for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explain philosophy.&lt;&#x2F;strong&gt; Don&#x27;t just dcoument details; also document philosphy, motivation, and metaphors that provide a framework for understanding the overall structure of the code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Offer examples.&lt;&#x2F;strong&gt; Sometimes an example is worth a pile of documentation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Have conversations with other developers!.&lt;&#x2F;strong&gt; In a collaborative project, you can sometimes ask a question just by putting it in the source. You may come back to find it answered. Leave the question and the answer for others who might later wonder too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maintain your &amp;quot;to do&amp;quot; list.&lt;&#x2F;strong&gt; Put a special marker on comments that you want to return to later.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;documentation-say-what-you-mean&quot;&gt;Documentation: say what you mean&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Describe the purpose and structure of system&lt;&#x2F;li&gt;
&lt;li&gt;Describe each file&lt;&#x2F;li&gt;
&lt;li&gt;Describe each package&lt;&#x2F;li&gt;
&lt;li&gt;Documentation strings for all functions&lt;&#x2F;li&gt;
&lt;li&gt;Consider automatic tools&lt;&#x2F;li&gt;
&lt;li&gt;Make code, not comments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;portability&quot;&gt;Portability&lt;&#x2F;h2&gt;
&lt;p&gt;Make your program run well in the environment(s) you use.&lt;&#x2F;p&gt;
&lt;p&gt;But be aware that you or someone else may want to use it in another environment someday.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mean-what-you-say&quot;&gt;Mean what you say&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Don&#x27;t mislead the reader. Anticipate reader&#x27;s misunderstandings&lt;&#x2F;li&gt;
&lt;li&gt;Use the right level of specificity&lt;&#x2F;li&gt;
&lt;li&gt;Be careful with declarations. Incorrect declaratoins can break code&lt;&#x2F;li&gt;
&lt;li&gt;One-to-one correspondence&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Expect the unexpected&lt;&#x2F;li&gt;
&lt;li&gt;Read other people&#x27;s code&lt;&#x2F;li&gt;
&lt;li&gt;Prototype&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>elements of programming</title>
		<published>2020-12-01T00:00:00+00:00</published>
		<updated>2020-12-01T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;p&gt;Elements of programming style. (1974)&lt;&#x2F;p&gt;
&lt;p&gt;Brian Kernighan and P.J Plauger&lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/elements-programming/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/elements-programming/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;p&gt;Elements of programming style. (1974)&lt;&#x2F;p&gt;
&lt;p&gt;Brian Kernighan and P.J Plauger&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write clearly - don&#x27;t be to clever.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;expression&quot;&gt;Expression&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Say what you mean, simply and directly.&lt;&#x2F;strong&gt; Explicit. Intention. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use library functions.&lt;&#x2F;strong&gt; Don&#x27;t re-invent the wheel. Copy. Even better. Steal. Good artist copy, genius steal.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid temporary variables.&lt;&#x2F;strong&gt; Avoid mutable data structures when it makes sense.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write clearly - don&#x27;t sacrifice clarity for &amp;quot;efficiency&amp;quot;.&lt;&#x2F;strong&gt; Benchmark.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Let the machine do the dirty work.&lt;&#x2F;strong&gt; Computers are fast. More than you think.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Replace repetitive expressions by calls to a common function.&lt;&#x2F;strong&gt; But don&#x27;t add abstractions you won&#x27;t need.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parenthesize to avoid ambiguity.&lt;&#x2F;strong&gt; Rename, rewrite.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choose variable names that won&#x27;t be confused.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid unnecessary branches.&lt;&#x2F;strong&gt; Algorithmic design code smell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the good features of a language; avoid the bad ones.&lt;&#x2F;strong&gt; Use the right tool for the job. Don&#x27;t use conditional branches as a substitue for a logical expression. Think in expressions. Write with expressions. Always. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;control-structure&quot;&gt;Control structure&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delimit group of statements.&lt;&#x2F;strong&gt; Consisteny. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use IF-ELSE to emphasize that only one of two actions is to be performed.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use DO and DO-WHILE to emphasize the presence of loops.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make your programs read from top to bottom.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the fundamental control flow constructs.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write first in an easy-to-understand pseudo-language; then translate into whatever language you have to use.&lt;&#x2F;strong&gt; Paper first. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid THEN-IF and null ELSE.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid ELSE GOTO and ELSE RETURN.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Follow each decision as closely as opssible with its associated action.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use data arrays to avoid repetitive control sequences.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choose a data representation that makes the program simple.&lt;&#x2F;strong&gt; Data oriented programming. Data first. Data moves your code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t stop with your first draft.&lt;&#x2F;strong&gt; Forth philosophy. Thinking Forth.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;program-structure&quot;&gt;Program structure&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Modularize. Use subroutines.&lt;&#x2F;strong&gt; Write cohesive. Build languages. Extend your program as needed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the coupling between modules visible.&lt;&#x2F;strong&gt; Port. Adapter.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Each module should do one thing well.&lt;&#x2F;strong&gt; One thing.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure every module hides something.&lt;&#x2F;strong&gt; It&#x27;s not about what you hide. It&#x27;s more about what rules you expose. An interface is a contract.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Let the data structure the program.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Data first.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t patch bad code - rewrite it.&lt;&#x2F;strong&gt; Opportunistic programming. A program evolves. Always keep it in mind.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write and test a big program in small pieces.&lt;&#x2F;strong&gt; You don&#x27;t write test to check if it works. You write it assert it won&#x27;t break.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use recursive procedures for recursively-defined data structures.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;input-and-output&quot;&gt;Input and output&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test input for validity and plausiblity&lt;&#x2F;strong&gt; Don&#x27;t validate. Parse. Use your type system.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure input cannot violate the limits of the program.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Terminate input by end-of-file or marker, not by count.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identify bad input; recover if possible.&lt;&#x2F;strong&gt; If your code can recover it&#x27;s well written. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Treat end of file conditions in a uniform manner.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make input easy to prepare and output self-explanatory.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use uniform input formats.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make input easy to proofread.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use self-identifying input. Allow defaults. Echo both on output.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Localize input and output in subroutines.&lt;&#x2F;strong&gt; Limit side effects in the process.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;common-blunders&quot;&gt;Common blunders&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure all variables are initialized before use.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t stop at one bug.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use debuggin compilers.&lt;&#x2F;strong&gt; Invest in your environment.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialize constants with DATA statements or INITIAL attributes; initialize variable with executable code.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Watch out for off-by-one errors.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Take care to branch the right way on equality.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid multiple exits from loops.&lt;&#x2F;strong&gt; Algorithmic design code smell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure your code &amp;quot;does nothing&amp;quot; gracefully.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test programs at their boundary values.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Program defensively.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;10.0 times 0.1 is hardly ever 1.0.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;efficiency&quot;&gt;Efficiency&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make it right before you make it faster.&lt;&#x2F;strong&gt; You probably won&#x27;t ever need to make everything faster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep it right when you make it faster.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make it clear before you make it faster.&lt;&#x2F;strong&gt; Requirements will change anyway.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t sacrifice clarity for small gains in &amp;quot;efficiency&amp;quot;.&lt;&#x2F;strong&gt; You don&#x27;t even know what a GC is.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Let your compiler do the simple optimizations.&lt;&#x2F;strong&gt; Help the compiler. Smaller chunks of code usually help.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t strain to re-use code; reorganize instead.&lt;&#x2F;strong&gt; Don&#x27;t add complexity. Don&#x27;t add unnecesarry abstractions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure special cases are truly special.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep it simple to make it faster.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t diddle code to make it faster - find a better algorithm.&lt;&#x2F;strong&gt; Algorithmic design code smell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Instrument your programs. Measure before makign &amp;quot;efficiency&amp;quot; changes.&lt;&#x2F;strong&gt; Code so it&#x27;s easy to test. Code so it&#x27;s easy to benchmark.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure comments and code agree.&lt;&#x2F;strong&gt; Use your type system. Use auto generated docs. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make every comment count.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t comment bad code. Rewrite it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use variable names that mean something.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Format a program to help a reader understand it.&lt;&#x2F;strong&gt; Explain the why.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Indent to show the logical structure of a program.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Document your data layouts.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t over comment.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>programming as an art</title>
		<published>2020-09-29T00:00:00+00:00</published>
		<updated>2020-09-29T00:00:00+00:00</updated>
        <summary>&lt;hr &#x2F;&gt;
&lt;p&gt;Art as skill, as technique. The lost meaning of the XXI century. &lt;&#x2F;p&gt;
</summary>
		<link href="https://arnaudiaz.com/blog/programming-as-an-art/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/programming-as-an-art/</id>
		<content type="html">&lt;hr &#x2F;&gt;
&lt;p&gt;Art as skill, as technique. The lost meaning of the XXI century. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-arts-of-old&quot;&gt;The Arts of Old&lt;&#x2F;h2&gt;
&lt;p&gt;If we go back to the latin roots, we find ars, artis, meaning &amp;quot;skill&amp;quot;. It is perhaps significant that the corresponding Greek word was τέχνη, the root of both &amp;quot;techonlogy&amp;quot; and &amp;quot;technique&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays when someone speaks of &amp;quot;art&amp;quot; you probably think first of &amp;quot;fine arts&amp;quot; such as painting and sculpture, but before the twentieth century the word was generally used in quite a different sense. &lt;&#x2F;p&gt;
&lt;p&gt;In medieval times, &amp;quot;art&amp;quot; meant something derived by man&#x27;s intellect, as opposed to activities derived from nature or instinct. During the middle ages the word &amp;quot;art&amp;quot; by itself usually meant logic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;science-vs-art&quot;&gt;Science vs Art&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;quot;Science&amp;quot; being used to stand for knowledge, and &amp;quot;art&amp;quot; for the application of knowledge. Thus, the sciecne of astronomy was teh basis for teh art of navegation. The situation was almost exactly like the way in which we now distinguish between &amp;quot;science&amp;quot; and &amp;quot;engineering&amp;quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;works-of-art&quot;&gt;Works of Art&lt;&#x2F;h2&gt;
&lt;p&gt;When I speak about computer programming as an art, I am thinking primarily of it as an art form, in an aesthetic sense. &lt;&#x2F;p&gt;
&lt;p&gt;My feeling is that when we prepare a program, it can be like composing poetry or music; programming can give us both intellectual and emotional satisfaction, because it is a real achievement to master complexity and to establish a system of consistent rules.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore when we read other people&#x27;s programs, we can recognize some of them as genuine works of art.&lt;&#x2F;p&gt;
&lt;p&gt;Some programs are elegant, some are exquisite, some are sparkling. My claim is that it is possible to write grand programs, noble programs, truly magnificient ones!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;em&gt;Communications of the ACMVolume 17Issue 12Dec 1974&lt;&#x2F;em&gt; &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;10.1145&#x2F;361604.361612&quot;&gt;programming as an art&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>epoche etude postmortem</title>
		<published>2020-09-28T00:00:00+00:00</published>
		<updated>2020-09-28T00:00:00+00:00</updated>
		<link href="https://arnaudiaz.com/blog/epoche-etude-postmortem/" type="text/html"/>
		<id>https://arnaudiaz.com/blog/epoche-etude-postmortem/</id>
		<content type="html">&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;epoche&quot;&gt;epoche&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;suspension of judgment&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Noun
&lt;ol&gt;
&lt;li&gt;in ancient skepticism,  the act of refraining from any conclusion for or against anything as the decisive step for the attainment of ataraxy&lt;&#x2F;li&gt;
&lt;li&gt;the methodological attitude of phenomenology in which one refrains from judging whether anything exists or can exist as the first step in the phenomenological recognition, comprehension, and description of sense appearances : transcendental reduction&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;etude&quot;&gt;etude&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Noun
&lt;ol&gt;
&lt;li&gt;piece of music for the practice of a point of technique&lt;&#x2F;li&gt;
&lt;li&gt;composition built on a technical motive but played for its artistic value&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;postmortem&quot;&gt;postmortem&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adjective&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;done, occurring, or collected after death postmortem tissue specimens&lt;&#x2F;li&gt;
&lt;li&gt;following the event&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Noun&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;an examination of a body after death to determine the cause of death or the character and extent of changes produced by disease, critical examination, evaluation, or assessment of someone or something past.&lt;&#x2F;li&gt;
&lt;li&gt;an analysis or discussion of an event after it is over&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>